[{"content":"Introduction # Application in Domain Driven Design is a layer that gonna process user input, and give user an output so this layer shouldn\u0026rsquo;t contains the whole of business logic of your applications.\nCommands # The list of commands that can you use for structuring your Domain Driven Design project.\nRequest # A command to generate request file to your application layer, this command still generate the request file as usual like Laravel did. We just made the command readable and can fit with domain naming.\nCommand # php artisan application:make:request StoreUserRequest User Arguments # Name Description Name Request class name Domain Domain Name Options # Name Description --force Force create the Request class Resource # A command to generate resource file to your application layer, this command still generate the request file as usual like Laravel did. We just made the command readable and can fit with domain naming.\nCommand # php artisan application:make:resource UserResource User Arguments # Name Description Name Resource class name Domain Domain Name Options # Name Description --model=ModelName To hint Model class on Resource --force Force create the Resource class ","date":"1 February 2023","permalink":"/packages/diamond-console/application/","section":"Packages","summary":"Documentation commands for Application Layer","title":"Application"},{"content":"Introduction # Domain Layer in Domain Driven Design is a layer that hold the whole of your business logic, so this layer like as heart of your application.\nCommands # The list of commands that can you use for structuring your Domain Driven Design project.\nAction # Command for generate an Action inside your Domain directory.\nCommand # php artisan domain:make:action GenerateProfileAction User Arguments # Name Description Name Action class name Domain Domain Name Options # Name Description --force Force create the Action class Builder # Command for generate a Query Builder inside your Domain directory.\nCommand # php artisan domain:make:builder UserBuilder User Arguments # Name Description Name Builder class name Domain Domain Name Options # Name Description --model=ModelName To hint Model class on Query Builder --force Force create the Builder class Usage # In your model you can use the builder like the example below.\nsrc/Domain/Shared/User/Models/User.php\n\u0026lt;?php namespace Domain\\Shared\\User\\Models; use Domain\\Shared\\User\\Models\\Builders\\UserBuilder; use Illuminate\\Database\\Eloquent\\Factories\\HasFactory; use Illuminate\\Database\\Eloquent\\Model; /** * @mixin UserBuilder */ class User extends Model { use HasFactory; /** * @param $query * * @return UserBuilder\u0026lt;User\u0026gt; */ public function newEloquentBuilder($query): UserBuilder { return new UserBuilder(query: $query); } } Data Transfer Object # Command for generate a Data Transfer Object with plain PHP to your domain directory.\nCommand # php artisan domain:make:data-transfer-object RoleData User Arguments # Name Description Name Data Transfer Object class name Domain Domain Name Options # Name Description --force Force create the Data Transfer Object class Enum # Command for generate an Enum to your Domain directory.\nCommand # php artisan domain:make:enum Role User Arguments # Name Description Name Enum class name Domain Domain Name Options # Name Description --force Force create the Enum class Model # Command for generate a Model inside Shared in Domain directory, all Model will store shared folder since another Domain probably consume the Model at the same time.\nCommand # php artisan domain:make:model User User Arguments # Name Description Name Model class name Domain Domain Name Options # Name Description -m or --migration Create Migration file when model created -f or --factory Create Factory class when Model created this option will generate two files, Factory contract and Factory concrete --force Force create the Model class Value Object # Command for generate a Value Object class. This command will generate Value Object class into Domain.\nCommand # php artisan domain:make:value-object ReferralCode User Arguments # Name Description Name Value Object name class Domain Domain Name Options # Name Description --force Force create the Value Object class ","date":"1 February 2023","permalink":"/packages/diamond-console/domain/","section":"Packages","summary":"Documentation commands for Domain Layer","title":"Domain"},{"content":"Introduction # Infrastructure Layer in Domain Driven Design is a layer that contains external services such as Database, Messaging System, and Email Services etc. So mainly this layer contains the whole external services logic.\nCommands # The list of commands that can you use for structuring your Domain Driven Design project.\nEvent # Command for generate an Event class to your project.\nCommand # php artisan infrastructure:make:event PostEvent Post Arguments # Name Description Name Event name class Domain Domain Name Options # Name Description --force Force create the Event class Factory # Command for generate a Factory class.\nThis command would generate two files :\nFactory Concrete at Infrastructure/{DomainName}/Database/Factories Factory Contract at Domain/Shared/Contracts/Database/Factories The bottom of reason why we did this, cause Factories is an Infrastructure component then Domain can\u0026rsquo;t consume any stuff inside Infrastructure, so you can do Dependency Injection at Service Provider for resolve this one.\nCommand # php artisan infrastructure:make:factory RoleFactory User Arguments # Name Description Name Factory Name Domain Domain Name Options # Name Description --force Force create the Factory class Listener # Command for generate a Listener class to your project.\nCommand # php artisan infrastructure:make:listener PostListener Post Arguments # Name Description Name Listener name class Domain Domain Name Options # Name ` Description --event=NameEvent For create Event class and use it into Listener class --force Force create the Listener class Mail # Command for generate a Mail class. This command will generate Mail class into Infrastructure side because this class purpose is store to external.\nCommand # php artisan infrastructure:make:mail ApprovedUser User Arguments # Name Description Name Mail name class Domain Domain Name Options # Name Description --force Force create the Mail class Observer # Command for generate an Observer class to your project.\nCommand # php artisan infrastructure:make:observer UserObserver User Arguments # Name Description Name Observer name class Domain Domain Name Options # Name Description --force Force create the Observer class Seeder # Command for generate a Seeder class. This command will generate Seeder class into Infrastructure because this class purpose is to insert a test data into table.\nCommadn # php artisan infrastructure:make:seeder UserSeeder User Arguments # Name Description Name Seeder name class Domain Domain Name Options # Name Description --force Force create the Seeder class Provider # Command for generate a Service Provider class. This command will generate Service Provider class into Infrastructure to binds between Domain and Infrastructure.\nCommand # php artisan infrastructure:make:provider FactoryServiceProvider User Arguments # Name Description Name Service Provider name class Domain Domain Name Options # Name Description --force Force create the Service Provider class ","date":"1 February 2023","permalink":"/packages/diamond-console/infrastructure/","section":"Packages","summary":"Documentation commands for Infrastructure Layer","title":"Infrastructure"},{"content":"You can put alert box to your form area like the image above.\nUsage # use KoalaFacade\\FilamentAlertBox\\Forms\\Components\\AlertBox; AlertBox::make() -\u0026gt;label(label: \u0026#39;Oops\u0026#39;) -\u0026gt;helperText(text: \u0026#39;please make a payment first.\u0026#39;) -\u0026gt;icon(name: \u0026#39;heroicon-o-exclamation\u0026#39;) -\u0026gt;warning(); Available Methods # These available methods you can use when defining alert box.\nuse Closure; /** Set alert title */ function label(string $label): static; /** Set alert helper text */ function label(string $text): static; /** define alert icon */ function icon(string $name): static; /** define alert type */ function primary(): static; function warning(): static; function success(): static; function danger(): static; /** hide alert box */ function hidden(bool | Closure $condition = true): static; function hiddenOn(string | array $contexts): static; ","date":"31 January 2023","permalink":"/packages/filament-alertbox/forms/","section":"Packages","summary":"Put alert box to your forms area.","title":"Forms"},{"content":"You can treat alert box as widget as well and put anywhere that supported widget placements in your Filament project\nUsage # For implement alert box widget, you can create a widget as usual then inheritance our package class\nuse KoalaFacade\\FilamentAlertBox\\Widgets\\AlertBoxWidget; use Closure; use Illuminate\\Support\\HtmlString; class YourWidgetTho extends AlertBoxWidget { public string | Closure | null $icon = \u0026#39;heroicon-o-exclamation\u0026#39;; /** success, warning, danger, primary */ public string $type = \u0026#39;warning\u0026#39;; public string | Closure | null $label = \u0026#39;Oops!\u0026#39;; public string | Closure | null | HtmlString $helperText = \u0026#39;I love your mom\u0026#39;; public function getHelperText(): string | HtmlString | null { return $this-\u0026gt;helperText; } public function getLabel(): string { $label = $this-\u0026gt;evaluate($this-\u0026gt;label) ?? (string) Str::of($this-\u0026gt;getName()) -\u0026gt;beforeLast(\u0026#39;.\u0026#39;) -\u0026gt;afterLast(\u0026#39;.\u0026#39;) -\u0026gt;kebab() -\u0026gt;replace([\u0026#39;-\u0026#39;, \u0026#39;_\u0026#39;], \u0026#39; \u0026#39;) -\u0026gt;ucfirst(); return $this-\u0026gt;shouldTranslateLabel ? __($label) : $label; } } ","date":"31 January 2023","permalink":"/packages/filament-alertbox/widget/","section":"Packages","summary":"Treat alert box as widget and can put anywhere in your Filament","title":"Widget"},{"content":"MIT License\nCopyright (c) 2022 KoalaFacade\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026ldquo;Software\u0026rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \u0026ldquo;AS IS\u0026rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","date":"31 January 2023","permalink":"/packages/filament-alertbox/license/","section":"Packages","summary":"The MIT License (MIT)","title":"License"},{"content":"","date":"30 January 2023","permalink":"/tags/docs/","section":"Tags","summary":"","title":"docs"},{"content":"","date":"30 January 2023","permalink":"/tags/filament/","section":"Tags","summary":"","title":"filament"},{"content":" Filament plugin to enforce your client to pay your project\nWarning! This package will make your client scream to you. Installation # composer require koalafacade/filament-crash After the package installed it the package automatically serving the javascript to make blank your filament page base on due date your input.\nUsage # You need to set the due date and the deadline, you can put these in your .env\nDUE_DATE=\u0026#34;2023-01-17\u0026#34; DEADLINE_DAYS=10 those env will set the due date to 2023-01-17 and make the filament page will fully blank when 2023-01-27 (10 days after due date).\n","date":"30 January 2023","permalink":"/packages/filament-crash/","section":"Packages","summary":"Filament plugin to enforce your client to pay your project","title":"Filament Crash"},{"content":"","date":"30 January 2023","permalink":"/tags/laravel/","section":"Tags","summary":"","title":"laravel"},{"content":"","date":"30 January 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" Preview Filament AlertBox Filament plugin for display a static alert box in your filament forms and widget.\nInstallation # You can install the package via composer:\ncomposer require koalafacade/filament-alertbox Usage # For usage the alert box we\u0026rsquo;ve to kind of implementation you can go thru the page below.\n","date":"30 January 2023","permalink":"/packages/filament-alertbox/","section":"Packages","summary":"Preview Filament AlertBox Filament plugin for display a static alert box in your filament forms and widget.","title":"Filament AlertBox"},{"content":"","date":"30 January 2023","permalink":"/tags/ddd/","section":"Tags","summary":"","title":"ddd"},{"content":" Diamond Console Artisan command package to handle your Domain Driven Design project that suitable with Laravel base structures, made for comer of Domain Driven Design and advanced.\nInstallation # Install Diamond Console with composer\ncomposer require koalafacade/diamond-console then after Diamond Console installed run command below to set up your project. The command below will generate namespace in composer and base directory structures.\nphp artisan diamond:install And then run this command for regenerate the autoload class.\ncomposer dump-autoload Options # Name Description --skip-refactor Skip refactor app path to Infrastructure Commands # ","date":"30 January 2023","permalink":"/packages/diamond-console/","section":"Packages","summary":"Diamond Console Artisan command package to handle your Domain Driven Design project that suitable with Laravel base structures, made for comer of Domain Driven Design and advanced.","title":"Diamond Console"},{"content":"","date":"30 January 2023","permalink":"/","section":"KoalaFacade","summary":"","title":"KoalaFacade"},{"content":"","date":"30 January 2023","permalink":"/packages/","section":"Packages","summary":"","title":"Packages"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]